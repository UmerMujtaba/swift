{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"rootStyle\", \"textInputStyle\", \"onBlur\", \"onFocus\", \"value\", \"renderCell\", \"cellCount\", \"RootProps\", \"RootComponent\", \"InputComponent\"];\nvar _jsxFileName = \"/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-confirmation-code-field/esm/CodeField.js\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { forwardRef } from 'react';\nimport { getStyle, getSymbols } from './utils';\nimport { useFocusState } from './useFocusState';\nimport { styles } from './CodeField.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_CELL_COUNT = 4;\nconst autoComplete = Platform.select({\n  android: 'sms-otp',\n  default: 'one-time-code'\n});\nfunction CodeFieldComponent(_ref, ref) {\n  let {\n      rootStyle,\n      textInputStyle,\n      onBlur,\n      onFocus,\n      value,\n      renderCell,\n      cellCount = DEFAULT_CELL_COUNT,\n      RootProps = {},\n      RootComponent = View,\n      InputComponent = TextInput\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const focusState = useFocusState(onBlur, onFocus);\n  const cells = getSymbols(value || '', cellCount).map((symbol, index, symbols) => {\n    const isFirstEmptySymbol = symbols.indexOf('') === index;\n    return renderCell({\n      index,\n      symbol,\n      isFocused: focusState.isFocused && isFirstEmptySymbol\n    });\n  });\n  return _jsxDEV(RootComponent, Object.assign({}, RootProps, {\n    style: getStyle(styles.root, rootStyle),\n    children: [cells, _jsxDEV(InputComponent, Object.assign({\n      disableFullscreenUI: true,\n      caretHidden: true,\n      spellCheck: false,\n      autoCorrect: false,\n      blurOnSubmit: false,\n      clearButtonMode: \"never\",\n      autoCapitalize: \"characters\",\n      underlineColorAndroid: \"transparent\",\n      maxLength: cellCount,\n      autoComplete: autoComplete\n    }, rest, {\n      value: value,\n      onBlur: focusState.onBlur,\n      onFocus: focusState.onFocus,\n      style: getStyle(styles.textInput, textInputStyle),\n      ref: ref\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this);\n}\nexport const CodeField = forwardRef(CodeFieldComponent);","map":{"version":3,"names":["React","forwardRef","getStyle","getSymbols","useFocusState","styles","jsxDEV","_jsxDEV","DEFAULT_CELL_COUNT","autoComplete","Platform","select","android","default","CodeFieldComponent","_ref","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","InputComponent","TextInput","rest","_objectWithoutPropertiesLoose","_excluded","focusState","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","isFocused","Object","assign","style","root","children","disableFullscreenUI","caretHidden","spellCheck","autoCorrect","blurOnSubmit","clearButtonMode","autoCapitalize","underlineColorAndroid","maxLength","textInput","fileName","_jsxFileName","lineNumber","columnNumber","CodeField"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-confirmation-code-field/esm/CodeField.js"],"sourcesContent":["import { Platform, TextInput, View, } from 'react-native';\nimport React, { forwardRef, } from 'react';\nimport { getStyle, getSymbols } from './utils';\nimport { useFocusState } from './useFocusState';\nimport { styles } from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nconst autoComplete = Platform.select({\n    android: 'sms-otp',\n    default: 'one-time-code',\n});\nfunction CodeFieldComponent({ rootStyle, textInputStyle, onBlur, onFocus, value, renderCell, cellCount = DEFAULT_CELL_COUNT, RootProps = {}, RootComponent = View, InputComponent = TextInput, ...rest }, ref) {\n    const focusState = useFocusState(onBlur, onFocus);\n    const cells = getSymbols(value || '', cellCount).map((symbol, index, symbols) => {\n        const isFirstEmptySymbol = symbols.indexOf('') === index;\n        return renderCell({\n            index,\n            symbol,\n            isFocused: focusState.isFocused && isFirstEmptySymbol,\n        });\n    });\n    return (<RootComponent {...RootProps} style={getStyle(styles.root, rootStyle)}>\n      {cells}\n      <InputComponent disableFullscreenUI \n    // Use `caretHidden={false}` when `value={''}` and user can't paste\\copy text because menu doesn't appear\n    // See more: https://github.com/retyui/react-native-confirmation-code-field/issues/140\n    caretHidden={true} spellCheck={false} autoCorrect={false} blurOnSubmit={false} clearButtonMode=\"never\" autoCapitalize=\"characters\" underlineColorAndroid=\"transparent\" maxLength={cellCount} autoComplete={autoComplete} {...rest} value={value} onBlur={focusState.onBlur} onFocus={focusState.onFocus} style={getStyle(styles.textInput, textInputStyle)} ref={ref}/>\n    </RootComponent>);\n}\nexport const CodeField = forwardRef(CodeFieldComponent);\n"],"mappings":";;;;;;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAS,OAAO;AAC1C,SAASC,QAAQ,EAAEC,UAAU,QAAQ,SAAS;AAC9C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,MAAM,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC5C,MAAMC,kBAAkB,GAAG,CAAC;AAC5B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,MAAM,CAAC;EACjCC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACb,CAAC,CAAC;AACF,SAASC,kBAAkBA,CAAAC,IAAA,EAA+KC,GAAG,EAAE;EAAA,IAAnL;MAAEC,SAAS;MAAEC,cAAc;MAAEC,MAAM;MAAEC,OAAO;MAAEC,KAAK;MAAEC,UAAU;MAAEC,SAAS,GAAGf,kBAAkB;MAAEgB,SAAS,GAAG,CAAC,CAAC;MAAEC,aAAa,GAAGC,IAAI;MAAEC,cAAc,GAAGC;IAAmB,CAAC,GAAAb,IAAA;IAANc,IAAI,GAAAC,6BAAA,CAAAf,IAAA,EAAAgB,SAAA;EAClM,MAAMC,UAAU,GAAG5B,aAAa,CAACe,MAAM,EAAEC,OAAO,CAAC;EACjD,MAAMa,KAAK,GAAG9B,UAAU,CAACkB,KAAK,IAAI,EAAE,EAAEE,SAAS,CAAC,CAACW,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,KAAK;IAC7E,MAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAO,CAAC,EAAE,CAAC,KAAKH,KAAK;IACxD,OAAOd,UAAU,CAAC;MACdc,KAAK;MACLD,MAAM;MACNK,SAAS,EAAER,UAAU,CAACQ,SAAS,IAAIF;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAQ/B,OAAA,CAACkB,aAAa,EAAAgB,MAAA,CAAAC,MAAA,KAAKlB,SAAS;IAAEmB,KAAK,EAAEzC,QAAQ,CAACG,MAAM,CAACuC,IAAI,EAAE3B,SAAS,CAAE;IAAA4B,QAAA,GAC3EZ,KAAK,EACN1B,OAAA,CAACoB,cAAc,EAAAc,MAAA,CAAAC,MAAA;MAACI,mBAAmB;MAGrCC,WAAW,EAAE,IAAK;MAACC,UAAU,EAAE,KAAM;MAACC,WAAW,EAAE,KAAM;MAACC,YAAY,EAAE,KAAM;MAACC,eAAe,EAAC,OAAO;MAACC,cAAc,EAAC,YAAY;MAACC,qBAAqB,EAAC,aAAa;MAACC,SAAS,EAAE/B,SAAU;MAACd,YAAY,EAAEA;IAAa,GAAKoB,IAAI;MAAER,KAAK,EAAEA,KAAM;MAACF,MAAM,EAAEa,UAAU,CAACb,MAAO;MAACC,OAAO,EAAEY,UAAU,CAACZ,OAAQ;MAACuB,KAAK,EAAEzC,QAAQ,CAACG,MAAM,CAACkD,SAAS,EAAErC,cAAc,CAAE;MAACF,GAAG,EAAEA;IAAI;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxV,CAAC;AACpB;AACA,OAAO,MAAMC,SAAS,GAAG3D,UAAU,CAACa,kBAAkB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}