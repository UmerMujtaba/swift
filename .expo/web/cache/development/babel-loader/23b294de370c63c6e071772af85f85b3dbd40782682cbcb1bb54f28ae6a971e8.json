{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nconst findIndex = ({\n  locationX,\n  locationY\n}, map) => {\n  for (const [index, {\n    x,\n    y,\n    xEnd,\n    yEnd\n  }] of Object.entries(map)) {\n    if (x < locationX && locationX < xEnd && y < locationY && locationY < yEnd) {\n      return parseInt(index, 10);\n    }\n  }\n  return -1;\n};\nexport const useClearByFocusCell = options => {\n  const valueRef = useRef(options);\n  const cellsLayouts = useRef({});\n  valueRef.current = options;\n  const clearCodeByCoords = coords => {\n    const index = findIndex(coords, cellsLayouts.current);\n    if (index !== -1) {\n      const {\n        value,\n        setValue\n      } = valueRef.current;\n      const text = (value || '').slice(0, index);\n      setValue(text);\n    }\n  };\n  const getCellOnLayoutHandler = index => event => {\n    const {\n      width,\n      height,\n      x,\n      y\n    } = event.nativeEvent.layout;\n    cellsLayouts.current[`${index}`] = {\n      x,\n      xEnd: x + width,\n      y,\n      yEnd: y + height\n    };\n  };\n  const onPressOut = event => clearCodeByCoords(event.nativeEvent);\n  const onClick = event => {\n    const [offset] = event.target.getClientRects();\n    const locationX = event.clientX - offset.left;\n    const locationY = event.clientY - offset.top;\n    clearCodeByCoords({\n      locationX,\n      locationY\n    });\n  };\n  return [useMemo(() => Platform.select({\n    web: {\n      onClick\n    },\n    default: {\n      onPressOut\n    }\n  }), []), getCellOnLayoutHandler];\n};","map":{"version":3,"names":["useMemo","useRef","Platform","findIndex","locationX","locationY","map","index","x","y","xEnd","yEnd","Object","entries","parseInt","useClearByFocusCell","options","valueRef","cellsLayouts","current","clearCodeByCoords","coords","value","setValue","text","slice","getCellOnLayoutHandler","event","width","height","nativeEvent","layout","onPressOut","onClick","offset","target","getClientRects","clientX","left","clientY","top","select","web","default"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-confirmation-code-field/esm/useClearByFocusCell.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport { Platform } from 'react-native';\nconst findIndex = ({ locationX, locationY }, map) => {\n    for (const [index, { x, y, xEnd, yEnd }] of Object.entries(map)) {\n        if (x < locationX &&\n            locationX < xEnd &&\n            y < locationY &&\n            locationY < yEnd) {\n            return parseInt(index, 10);\n        }\n    }\n    return -1;\n};\nexport const useClearByFocusCell = (options) => {\n    const valueRef = useRef(options);\n    const cellsLayouts = useRef({});\n    valueRef.current = options;\n    const clearCodeByCoords = (coords) => {\n        const index = findIndex(coords, cellsLayouts.current);\n        if (index !== -1) {\n            const { value, setValue } = valueRef.current;\n            const text = (value || '').slice(0, index);\n            setValue(text);\n        }\n    };\n    const getCellOnLayoutHandler = (index) => (event) => {\n        const { width, height, x, y } = event.nativeEvent.layout;\n        cellsLayouts.current[`${index}`] = {\n            x,\n            xEnd: x + width,\n            y,\n            yEnd: y + height,\n        };\n    };\n    const onPressOut = (event) => clearCodeByCoords(event.nativeEvent);\n    // For support react-native-web\n    const onClick = (event) => {\n        // @ts-expect-error: not types for getClientRects\n        const [offset] = event.target.getClientRects();\n        const locationX = event.clientX - offset.left;\n        const locationY = event.clientY - offset.top;\n        clearCodeByCoords({ locationX, locationY });\n    };\n    return [\n        // @ts-expect-error: for web support\n        useMemo(() => Platform.select({ web: { onClick }, default: { onPressOut } }), []),\n        getCellOnLayoutHandler,\n    ];\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAExC,MAAMC,SAAS,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,EAAEC,GAAG,KAAK;EACjD,KAAK,MAAM,CAACC,KAAK,EAAE;IAAEC,CAAC;IAAEC,CAAC;IAAEC,IAAI;IAAEC;EAAK,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,GAAG,CAAC,EAAE;IAC7D,IAAIE,CAAC,GAAGJ,SAAS,IACbA,SAAS,GAAGM,IAAI,IAChBD,CAAC,GAAGJ,SAAS,IACbA,SAAS,GAAGM,IAAI,EAAE;MAClB,OAAOG,QAAQ,CAACP,KAAK,EAAE,EAAE,CAAC;IAC9B;EACJ;EACA,OAAO,CAAC,CAAC;AACb,CAAC;AACD,OAAO,MAAMQ,mBAAmB,GAAIC,OAAO,IAAK;EAC5C,MAAMC,QAAQ,GAAGhB,MAAM,CAACe,OAAO,CAAC;EAChC,MAAME,YAAY,GAAGjB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/BgB,QAAQ,CAACE,OAAO,GAAGH,OAAO;EAC1B,MAAMI,iBAAiB,GAAIC,MAAM,IAAK;IAClC,MAAMd,KAAK,GAAGJ,SAAS,CAACkB,MAAM,EAAEH,YAAY,CAACC,OAAO,CAAC;IACrD,IAAIZ,KAAK,KAAK,CAAC,CAAC,EAAE;MACd,MAAM;QAAEe,KAAK;QAAEC;MAAS,CAAC,GAAGN,QAAQ,CAACE,OAAO;MAC5C,MAAMK,IAAI,GAAG,CAACF,KAAK,IAAI,EAAE,EAAEG,KAAK,CAAC,CAAC,EAAElB,KAAK,CAAC;MAC1CgB,QAAQ,CAACC,IAAI,CAAC;IAClB;EACJ,CAAC;EACD,MAAME,sBAAsB,GAAInB,KAAK,IAAMoB,KAAK,IAAK;IACjD,MAAM;MAAEC,KAAK;MAAEC,MAAM;MAAErB,CAAC;MAAEC;IAAE,CAAC,GAAGkB,KAAK,CAACG,WAAW,CAACC,MAAM;IACxDb,YAAY,CAACC,OAAO,CAAC,GAAGZ,KAAK,EAAE,CAAC,GAAG;MAC/BC,CAAC;MACDE,IAAI,EAAEF,CAAC,GAAGoB,KAAK;MACfnB,CAAC;MACDE,IAAI,EAAEF,CAAC,GAAGoB;IACd,CAAC;EACL,CAAC;EACD,MAAMG,UAAU,GAAIL,KAAK,IAAKP,iBAAiB,CAACO,KAAK,CAACG,WAAW,CAAC;EAElE,MAAMG,OAAO,GAAIN,KAAK,IAAK;IAEvB,MAAM,CAACO,MAAM,CAAC,GAAGP,KAAK,CAACQ,MAAM,CAACC,cAAc,CAAC,CAAC;IAC9C,MAAMhC,SAAS,GAAGuB,KAAK,CAACU,OAAO,GAAGH,MAAM,CAACI,IAAI;IAC7C,MAAMjC,SAAS,GAAGsB,KAAK,CAACY,OAAO,GAAGL,MAAM,CAACM,GAAG;IAC5CpB,iBAAiB,CAAC;MAAEhB,SAAS;MAAEC;IAAU,CAAC,CAAC;EAC/C,CAAC;EACD,OAAO,CAEHL,OAAO,CAAC,MAAME,QAAQ,CAACuC,MAAM,CAAC;IAAEC,GAAG,EAAE;MAAET;IAAQ,CAAC;IAAEU,OAAO,EAAE;MAAEX;IAAW;EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EACjFN,sBAAsB,CACzB;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}