{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nlet screenWidth = Dimensions.get('window').width;\nlet screenHeight = Dimensions.get('window').height;\nconst _height = Dimensions.get('window').height;\nconst _width = Dimensions.get('window').width;\nconst widthPercentageToDP = widthPercent => {\n  const elemWidth = typeof widthPercent === 'number' ? widthPercent : parseFloat(widthPercent);\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\nconst heightPercentageToDP = heightPercent => {\n  const elemHeight = typeof heightPercent === 'number' ? heightPercent : parseFloat(heightPercent);\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\nconst DesignWidth = 390;\nconst DesignHeight = 844;\nconst DeviceWidth = Dimensions.get('window').width;\nconst DeviceHeight = Dimensions.get('window').height;\nconst DeviceWidthRatioDesignWidth = DeviceWidth / DesignWidth;\nconst DeviceHeightRatioDesignHeight = DeviceHeight / DesignHeight;\nconst ResponsiveWidth = width => {\n  return PixelRatio.roundToNearestPixel(width * DeviceWidthRatioDesignWidth);\n};\nconst ResponsiveHeight = height => {\n  return PixelRatio.roundToNearestPixel(height * DeviceHeightRatioDesignHeight);\n};\nconst ResponsiveFontSize = fontSize => {\n  return PixelRatio.roundToNearestPixel(fontSize * DeviceHeightRatioDesignHeight);\n};\nexport { widthPercentageToDP as wp, heightPercentageToDP as hp, ResponsiveWidth as rwp, ResponsiveHeight as rhp, ResponsiveFontSize as rfs, _height as height, _width as width };","map":{"version":3,"names":["screenWidth","Dimensions","get","width","screenHeight","height","_height","_width","widthPercentageToDP","widthPercent","elemWidth","parseFloat","PixelRatio","roundToNearestPixel","heightPercentageToDP","heightPercent","elemHeight","DesignWidth","DesignHeight","DeviceWidth","DeviceHeight","DeviceWidthRatioDesignWidth","DeviceHeightRatioDesignHeight","ResponsiveWidth","ResponsiveHeight","ResponsiveFontSize","fontSize","wp","hp","rwp","rhp","rfs"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/src/constants/dimensions.js"],"sourcesContent":["import {Dimensions, PixelRatio} from 'react-native';\n\nlet screenWidth = Dimensions.get('window').width;\nlet screenHeight = Dimensions.get('window').height;\nconst _height = Dimensions.get('window').height;\nconst _width = Dimensions.get('window').width;\nconst widthPercentageToDP = widthPercent => {\n  const elemWidth =\n    typeof widthPercent === 'number' ? widthPercent : parseFloat(widthPercent);\n  return PixelRatio.roundToNearestPixel((screenWidth * elemWidth) / 100);\n};\nconst heightPercentageToDP = heightPercent => {\n  const elemHeight =\n    typeof heightPercent === 'number'\n      ? heightPercent\n      : parseFloat(heightPercent);\n  return PixelRatio.roundToNearestPixel((screenHeight * elemHeight) / 100);\n};\nconst DesignWidth = 390;\nconst DesignHeight = 844;\nconst DeviceWidth = Dimensions.get('window').width;\nconst DeviceHeight = Dimensions.get('window').height;\nconst DeviceWidthRatioDesignWidth = DeviceWidth / DesignWidth;\nconst DeviceHeightRatioDesignHeight = DeviceHeight / DesignHeight;\nconst ResponsiveWidth = width => {\n  return PixelRatio.roundToNearestPixel(width * DeviceWidthRatioDesignWidth);\n};\nconst ResponsiveHeight = height => {\n  return PixelRatio.roundToNearestPixel(height * DeviceHeightRatioDesignHeight);\n};\nconst ResponsiveFontSize = fontSize => {\n  return PixelRatio.roundToNearestPixel(\n    fontSize * DeviceHeightRatioDesignHeight,\n  );\n};\nexport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n  ResponsiveWidth as rwp,\n  ResponsiveHeight as rhp,\n  ResponsiveFontSize as rfs,\n  _height as height,\n  _width as width,\n};\n"],"mappings":";;AAEA,IAAIA,WAAW,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AAChD,IAAIC,YAAY,GAAGH,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AAClD,MAAMC,OAAO,GAAGL,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AAC/C,MAAME,MAAM,GAAGN,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AAC7C,MAAMK,mBAAmB,GAAGC,YAAY,IAAI;EAC1C,MAAMC,SAAS,GACb,OAAOD,YAAY,KAAK,QAAQ,GAAGA,YAAY,GAAGE,UAAU,CAACF,YAAY,CAAC;EAC5E,OAAOG,UAAU,CAACC,mBAAmB,CAAEb,WAAW,GAAGU,SAAS,GAAI,GAAG,CAAC;AACxE,CAAC;AACD,MAAMI,oBAAoB,GAAGC,aAAa,IAAI;EAC5C,MAAMC,UAAU,GACd,OAAOD,aAAa,KAAK,QAAQ,GAC7BA,aAAa,GACbJ,UAAU,CAACI,aAAa,CAAC;EAC/B,OAAOH,UAAU,CAACC,mBAAmB,CAAET,YAAY,GAAGY,UAAU,GAAI,GAAG,CAAC;AAC1E,CAAC;AACD,MAAMC,WAAW,GAAG,GAAG;AACvB,MAAMC,YAAY,GAAG,GAAG;AACxB,MAAMC,WAAW,GAAGlB,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AAClD,MAAMiB,YAAY,GAAGnB,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AACpD,MAAMgB,2BAA2B,GAAGF,WAAW,GAAGF,WAAW;AAC7D,MAAMK,6BAA6B,GAAGF,YAAY,GAAGF,YAAY;AACjE,MAAMK,eAAe,GAAGpB,KAAK,IAAI;EAC/B,OAAOS,UAAU,CAACC,mBAAmB,CAACV,KAAK,GAAGkB,2BAA2B,CAAC;AAC5E,CAAC;AACD,MAAMG,gBAAgB,GAAGnB,MAAM,IAAI;EACjC,OAAOO,UAAU,CAACC,mBAAmB,CAACR,MAAM,GAAGiB,6BAA6B,CAAC;AAC/E,CAAC;AACD,MAAMG,kBAAkB,GAAGC,QAAQ,IAAI;EACrC,OAAOd,UAAU,CAACC,mBAAmB,CACnCa,QAAQ,GAAGJ,6BACb,CAAC;AACH,CAAC;AACD,SACEd,mBAAmB,IAAImB,EAAE,EACzBb,oBAAoB,IAAIc,EAAE,EAC1BL,eAAe,IAAIM,GAAG,EACtBL,gBAAgB,IAAIM,GAAG,EACvBL,kBAAkB,IAAIM,GAAG,EACzBzB,OAAO,IAAID,MAAM,EACjBE,MAAM,IAAIJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}