{"ast":null,"code":"var _jsxFileName = \"/Users/nextek/Desktop/folder/SwiftPay/src/screens/auth/signUpScreen/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetStartedScreenOne = () => {\n  const [progress, setProgress] = useState(new Animated.Value(0));\n  useEffect(() => {\n    Animated.timing(progress, {\n      toValue: 75,\n      duration: 2000\n    }).start();\n  }, []);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Animated.View, {\n      style: [styles.bar, {\n        width: progress\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      children: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    height: 20,\n    backgroundColor: '#ccc',\n    borderRadius: 10,\n    margin: 10\n  },\n  bar: {\n    height: 20,\n    backgroundColor: '#333',\n    borderRadius: 10\n  }\n});\nexport default GetStartedScreenOne;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","Animated","jsxDEV","_jsxDEV","GetStartedScreenOne","progress","setProgress","Value","timing","toValue","duration","start","style","styles","container","children","bar","width","fileName","_jsxFileName","lineNumber","columnNumber","create","height","backgroundColor","borderRadius","margin"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/src/screens/auth/signUpScreen/index.js"],"sourcesContent":["// import { View, Text, StatusBar, TouchableWithoutFeedback, Keyboard, Platform, TextInput } from 'react-native';\n// import React, { useRef, useState } from 'react';\n// import { styles } from './styles';\n// import AppBar from '../../../components/appBar';\n// import { ScreenNames, Strings } from '../../../constants/strings';\n// import CustomTextInput from '../../../components/customTextInput';\n// import { images } from '../../../assets/images';\n// import CustomCheckbox from '../../../components/customCheckBox';\n// import { GradientButton } from '../../../components/cta';\n// import { navigate } from '../../../navigator/navigationRef';\n// import ProgressBar from '../../../components/progressBar';\n\n// const GetStartedScreenOne = ({ navigation }) => {\n//   const [Email, setEmail] = useState('');\n//   const [Password, setPassword] = useState('');\n//   const [isSecureCheck, setIsSecureCheck] = useState(true);\n//   const [rememberMe, setRememberMe] = useState(false);\n//   const firstRef = useRef(null);\n//   const secondRef = useRef(null);\n//   const [currentStep, setCurrentStep] = useState(1);\n\n//   const handleCheckboxPress = (isChecked, setRememberMe) => {\n//     setRememberMe(isChecked);\n//     console.log('Keep me signed in is checked:', isChecked);\n//   };\n\n//   const isButtonEnabled = Email.length > 0 && Password.length > 0 && rememberMe;\n\n//   const totalSteps = 3;\n\n//   const handleNext = () => {\n//     if (currentStep < totalSteps) {\n//       setCurrentStep(currentStep + 1);\n//     }\n//   };\n\n//   const progress = (currentStep / totalSteps) * 100;\n  \n//   const DedicatedView = Platform.OS === 'web' ? View : TouchableWithoutFeedback\n//   const handlePress = () => {\n//     Platform.OS !== 'web' && Keyboard.dismiss()\n//   }\n//   return (\n//     <DedicatedView style={{flex:1}} onPress={handlePress}>\n//     <View style={[styles.container]}>\n//       <StatusBar translucent={true} backgroundColor={'transparent'} />\n//       <AppBar start={1} end={3} onPress={() => navigation.goBack()} />\n\n//       <ProgressBar progress={33.3} />\n\n//       <Text style={styles.title}>{Strings.getStartedWithAccount} </Text>\n\n//       {/* <TextInput\n      \n      \n//      style={{height:30}}\n     \n//       /> */}\n//       <CustomTextInput\n//         ref={firstRef}\n//         placeholder={Strings.enterEmail}\n//         keyboardType=\"email-address\"\n//         returnKeyType=\"next\"\n//         value={Email}\n//         onChangeText={setEmail}\n//         onSubmitEditing={() => secondRef.current.focus()}\n//         //selectionColor='red'\n//       />\n//       <CustomTextInput\n//         ref={secondRef}\n//         placeholder={Strings.password}\n//         keyboardType=\"default\"\n//         returnKeyType=\"done\"\n//         style={styles.inputText}\n//         secureTextEntry={isSecureCheck}\n//         value={Password}\n//         onChangeText={setPassword}\n//         suffixIconStyle={styles.iconStyle}\n//         eyeSource={isSecureCheck ? images.eyeOpenIcon : images.eyeHideIcon}\n//         eye\n//         eyePress={() => setIsSecureCheck(!isSecureCheck)}\n//       />\n\n//       <View style={styles.flexStyle} />\n//       <View style={styles.checkBoxView}>\n//         <CustomCheckbox\n//           label={Strings.termsTextStart}\n//           onPress={isChecked => handleCheckboxPress(isChecked, setRememberMe)}\n//         />\n\n//         <GradientButton\n//           buttonText={Strings.getStarted}\n//           style={[styles.btnStyle(isButtonEnabled)]}\n//           onPress={() => {\n//             if (isButtonEnabled) {\n//               navigate(ScreenNames.StartScreenTwo);\n//               handleNext();\n//             }\n//           }}\n//         />\n//       </View>\n//     </View>\n//     </DedicatedView>\n//   );\n// };\n\n// export default GetStartedScreenOne;\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, Animated } from 'react-native';\n\nconst GetStartedScreenOne = () => {\n  const [progress, setProgress] = useState(new Animated.Value(0));\n\n  useEffect(() => {\n    Animated.timing(progress, {\n      toValue: 75,\n      duration: 2000,\n    }).start();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.bar, { width: progress }]} />\n      <Text>{progress}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 20,\n    backgroundColor: '#ccc',\n    borderRadius: 10,\n    margin: 10,\n  },\n  bar: {\n    height: 20,\n    backgroundColor: '#333',\n    borderRadius: 10,\n  },\n});\n\nexport default GetStartedScreenOne;"],"mappings":";AA8GA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAII,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;EAE/DX,SAAS,CAAC,MAAM;IACdK,QAAQ,CAACO,MAAM,CAACH,QAAQ,EAAE;MACxBI,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,OACER,OAAA,CAACL,IAAI;IAACc,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BZ,OAAA,CAACF,QAAQ,CAACH,IAAI;MAACc,KAAK,EAAE,CAACC,MAAM,CAACG,GAAG,EAAE;QAAEC,KAAK,EAAEZ;MAAS,CAAC;IAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3DlB,OAAA,CAACJ,IAAI;MAAAgB,QAAA,EAAEV;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEX,CAAC;AAED,MAAMR,MAAM,GAAGb,UAAU,CAACsB,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,MAAM,EAAE,EAAE;IACVC,eAAe,EAAE,MAAM;IACvBC,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE;EACV,CAAC;EACDV,GAAG,EAAE;IACHO,MAAM,EAAE,EAAE;IACVC,eAAe,EAAE,MAAM;IACvBC,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAEF,eAAerB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}