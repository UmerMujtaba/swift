{"ast":null,"code":"import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import React,{useRef,useState}from'react';import{styles}from'./styles';import AppBar from'../../../components/appBar';import{ScreenNames,Strings}from'../../../constants/strings';import CustomTextInput from'../../../components/customTextInput';import{images}from'../../../assets/images';import CustomCheckbox from'../../../components/customCheckBox';import{GradientButton}from'../../../components/cta';import{navigate}from'../../../navigator/navigationRef';import ProgressBar from'../../../components/progressBar';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GetStartedScreenOne=({navigation})=>{const[Email,setEmail]=useState('');const[Password,setPassword]=useState('');const[isSecureCheck,setIsSecureCheck]=useState(true);const[rememberMe,setRememberMe]=useState(false);const firstRef=useRef(null);const secondRef=useRef(null);const[currentStep,setCurrentStep]=useState(1);const handleCheckboxPress=(isChecked,setRememberMe)=>{setRememberMe(isChecked);console.log('Keep me signed in is checked:',isChecked);};const isButtonEnabled=Email.length>0&&Password.length>0&&rememberMe;const totalSteps=3;const handleNext=()=>{if(currentStep<totalSteps){setCurrentStep(currentStep+1);}};const progress=currentStep/totalSteps*100;return _jsxs(View,{style:[styles.container],children:[_jsx(StatusBar,{translucent:true,backgroundColor:'transparent'}),_jsx(AppBar,{start:1,end:5,onPress:()=>navigation.goBack()}),_jsx(ProgressBar,{progress:33.3}),_jsxs(Text,{style:styles.title,children:[Strings.getStartedWithAccount,\" \"]}),_jsx(CustomTextInput,{ref:firstRef,placeholder:Strings.enterEmail,keyboardType:\"email-address\",returnKeyType:\"next\",value:Email,onChangeText:setEmail,onSubmitEditing:()=>secondRef.current.focus()}),_jsx(CustomTextInput,{ref:secondRef,placeholder:Strings.password,keyboardType:\"default\",returnKeyType:\"done\",style:styles.inputText,secureTextEntry:isSecureCheck,value:Password,onChangeText:setPassword,suffixIconStyle:styles.iconStyle,eyeSource:isSecureCheck?images.eyeOpenIcon:images.eyeHideIcon,eye:true,eyePress:()=>setIsSecureCheck(!isSecureCheck)}),_jsx(View,{style:styles.flexStyle}),_jsxs(View,{style:styles.checkBoxView,children:[_jsx(CustomCheckbox,{label:Strings.termsTextStart,onPress:isChecked=>handleCheckboxPress(isChecked,setRememberMe)}),_jsx(GradientButton,{buttonText:Strings.getStarted,style:[styles.btnStyle(isButtonEnabled)],onPress:()=>{if(isButtonEnabled){navigate(ScreenNames.StartScreenTwo);handleNext();}}})]})]});};export default GetStartedScreenOne;","map":{"version":3,"names":["React","useRef","useState","styles","AppBar","ScreenNames","Strings","CustomTextInput","images","CustomCheckbox","GradientButton","navigate","ProgressBar","jsx","_jsx","jsxs","_jsxs","GetStartedScreenOne","navigation","Email","setEmail","Password","setPassword","isSecureCheck","setIsSecureCheck","rememberMe","setRememberMe","firstRef","secondRef","currentStep","setCurrentStep","handleCheckboxPress","isChecked","console","log","isButtonEnabled","length","totalSteps","handleNext","progress","View","style","container","children","StatusBar","translucent","backgroundColor","start","end","onPress","goBack","Text","title","getStartedWithAccount","ref","placeholder","enterEmail","keyboardType","returnKeyType","value","onChangeText","onSubmitEditing","current","focus","password","inputText","secureTextEntry","suffixIconStyle","iconStyle","eyeSource","eyeOpenIcon","eyeHideIcon","eye","eyePress","flexStyle","checkBoxView","label","termsTextStart","buttonText","getStarted","btnStyle","StartScreenTwo"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/src/screens/auth/getStartScreenOne/index.js"],"sourcesContent":["import { View, Text, StatusBar } from 'react-native';\nimport React, { useRef, useState } from 'react';\nimport { styles } from './styles';\nimport AppBar from '../../../components/appBar';\nimport { ScreenNames, Strings } from '../../../constants/strings';\nimport CustomTextInput from '../../../components/customTextInput';\nimport { images } from '../../../assets/images';\nimport CustomCheckbox from '../../../components/customCheckBox';\nimport { GradientButton } from '../../../components/cta';\nimport { navigate } from '../../../navigator/navigationRef';\nimport ProgressBar from '../../../components/progressBar';\n\nconst GetStartedScreenOne = ({ navigation }) => {\n  const [Email, setEmail] = useState('');\n  const [Password, setPassword] = useState('');\n  const [isSecureCheck, setIsSecureCheck] = useState(true);\n  const [rememberMe, setRememberMe] = useState(false);\n  const firstRef = useRef(null);\n  const secondRef = useRef(null);\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const handleCheckboxPress = (isChecked, setRememberMe) => {\n    setRememberMe(isChecked);\n    console.log('Keep me signed in is checked:', isChecked);\n  };\n\n  const isButtonEnabled = Email.length > 0 && Password.length > 0 && rememberMe;\n\n  const totalSteps = 3;\n\n  const handleNext = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const progress = (currentStep / totalSteps) * 100;\n\n  return (\n    <View style={[styles.container]}>\n      <StatusBar translucent={true} backgroundColor={'transparent'} />\n      <AppBar start={1} end={5} onPress={() => navigation.goBack()} />\n\n      <ProgressBar progress={33.3} />\n\n      <Text style={styles.title}>{Strings.getStartedWithAccount} </Text>\n      <CustomTextInput\n        ref={firstRef}\n        placeholder={Strings.enterEmail}\n        keyboardType=\"email-address\"\n        returnKeyType=\"next\"\n        value={Email}\n        onChangeText={setEmail}\n        onSubmitEditing={() => secondRef.current.focus()}\n      />\n      <CustomTextInput\n        ref={secondRef}\n        placeholder={Strings.password}\n        keyboardType=\"default\"\n        returnKeyType=\"done\"\n        style={styles.inputText}\n        secureTextEntry={isSecureCheck}\n        value={Password}\n        onChangeText={setPassword}\n        suffixIconStyle={styles.iconStyle}\n        eyeSource={isSecureCheck ? images.eyeOpenIcon : images.eyeHideIcon}\n        eye\n        eyePress={() => setIsSecureCheck(!isSecureCheck)}\n      />\n\n      <View style={styles.flexStyle} />\n      <View style={styles.checkBoxView}>\n        <CustomCheckbox\n          label={Strings.termsTextStart}\n          onPress={isChecked => handleCheckboxPress(isChecked, setRememberMe)}\n        />\n\n        <GradientButton\n          buttonText={Strings.getStarted}\n          style={[styles.btnStyle(isButtonEnabled)]}\n          onPress={() => {\n            if (isButtonEnabled) {\n              navigate(ScreenNames.StartScreenTwo);\n              handleNext();\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default GetStartedScreenOne;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}