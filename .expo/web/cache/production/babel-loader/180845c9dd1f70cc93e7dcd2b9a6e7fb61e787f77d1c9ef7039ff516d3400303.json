{"ast":null,"code":"var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import{customDirectEventTypes}from'./customDirectEventTypes';import RNGestureHandlerModule from'../RNGestureHandlerModule';import{State}from'../State';import{handlerIDToTag,registerOldGestureHandler}from'./handlersRegistry';import{getNextHandlerTag}from'./getNextHandlerTag';import{filterConfig,findNodeHandle,scheduleFlushOperations}from'./utils';import{deepEqual,isFabric,isJestEnv,tagMessage}from'../utils';import{ActionType}from'../ActionType';import{PressabilityDebugView}from'./PressabilityDebugView';import GestureHandlerRootViewContext from'../GestureHandlerRootViewContext';import{ghQueueMicrotask}from'../ghQueueMicrotask';const UIManagerAny=UIManager;customDirectEventTypes.topGestureHandlerEvent={registrationName:'onGestureHandlerEvent'};const customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};const customGHEventsConfig=Object.assign({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},isFabric()&&false&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=Object.assign({},UIManagerAny.genericDirectEventTypes,customGHEventsConfig);const UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=Object.assign({},UIManagerConstants.genericDirectEventTypes,customGHEventsConfig);}const{setJSResponder:oldSetJSResponder=()=>{},clearJSResponder:oldClearJSResponder=()=>{}}=UIManagerAny;UIManagerAny.setJSResponder=(tag,blockNativeResponder)=>{RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=()=>{RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};let allowTouches=true;const DEV_ON_ANDROID=false&&false;if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',()=>{allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){const extract=refs=>{if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(r=>r&&r.current===null);};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}const stateToPropMappings={[State.UNDETERMINED]:undefined,[State.BEGAN]:'onBegan',[State.FAILED]:'onFailed',[State.CANCELLED]:'onCancelled',[State.ACTIVE]:'onActivated',[State.END]:'onEnded'};const UNRESOLVED_REFS_RETRY_LIMIT=1;export default function createHandler({name,allowedProps=[],config={},transformProps,customNativeProps=[]}){class Handler extends React.Component{constructor(props){super(props);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"config\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"isMountedRef\",void 0);_defineProperty(this,\"viewNode\",void 0);_defineProperty(this,\"viewTag\",void 0);_defineProperty(this,\"inspectorToggleListener\",void 0);_defineProperty(this,\"onGestureHandlerEvent\",event=>{if(event.nativeEvent.handlerTag===this.handlerTag){if(typeof this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(this,\"onGestureHandlerStateChange\",event=>{if(event.nativeEvent.handlerTag===this.handlerTag){if(typeof this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}const state=event.nativeEvent.state;const stateEventName=stateToPropMappings[state];const eventHandler=stateEventName&&this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(this,\"refHandler\",node=>{this.viewNode=node;const child=React.Children.only(this.props.children);const{ref}=child;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(this,\"createGestureHandler\",newConfig=>{this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,this.handlerTag,newConfig);});_defineProperty(this,\"attachGestureHandler\",newViewTag=>{this.viewTag=newViewTag;if(true){RNGestureHandlerModule.attachGestureHandler(this.handlerTag,newViewTag,ActionType.JS_FUNCTION_OLD_API,this.propsRef);}else{registerOldGestureHandler(this.handlerTag,{onGestureEvent:this.onGestureHandlerEvent,onGestureStateChange:this.onGestureHandlerStateChange});const actionType=(()=>{var _this$props5,_this$props6;const onGestureEvent=(_this$props5=this.props)===null||_this$props5===void 0?void 0:_this$props5.onGestureEvent;const isGestureHandlerWorklet=onGestureEvent&&('current'in onGestureEvent||'workletEventHandler'in onGestureEvent);const onHandlerStateChange=(_this$props6=this.props)===null||_this$props6===void 0?void 0:_this$props6.onHandlerStateChange;const isStateChangeHandlerWorklet=onHandlerStateChange&&('current'in onHandlerStateChange||'workletEventHandler'in onHandlerStateChange);const isReanimatedHandler=isGestureHandlerWorklet||isStateChangeHandlerWorklet;if(isReanimatedHandler){return ActionType.REANIMATED_WORKLET;}else if(onGestureEvent&&'__isNative'in onGestureEvent){return ActionType.NATIVE_ANIMATED_EVENT;}else{return ActionType.JS_FUNCTION_OLD_API;}})();RNGestureHandlerModule.attachGestureHandler(this.handlerTag,newViewTag,actionType);}scheduleFlushOperations();});_defineProperty(this,\"updateGestureHandler\",newConfig=>{this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(this.handlerTag,newConfig);scheduleFlushOperations();});this.handlerTag=getNextHandlerTag();this.config={};this.propsRef=React.createRef();this.isMountedRef=React.createRef();this.state={allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(`Handler with ID \"${props.id}\" already registered`);}handlerIDToTag[props.id]=this.handlerTag;}}componentDidMount(){const props=this.props;this.isMountedRef.current=true;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',()=>{this.setState(_=>({allowTouches}));this.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){ghQueueMicrotask(()=>{this.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[...allowedProps,...customNativeProps],config));this.attachGestureHandler(findNodeHandle(this.viewNode));}componentDidUpdate(){const viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();this.isMountedRef.current=false;RNGestureHandlerModule.dropGestureHandler(this.handlerTag);scheduleFlushOperations();const handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}update(remainingTries){if(!this.isMountedRef.current){return;}const props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){ghQueueMicrotask(()=>{this.update(remainingTries-1);});}else{const newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[...allowedProps,...customNativeProps],config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}setNativeProps(updates){const mergedProps=Object.assign({},this.props,updates);const newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[...allowedProps,...customNativeProps],config);this.updateGestureHandler(newConfig);}render(){var _this$props$testID;if(false&&!this.context&&!isJestEnv()&&false){throw new Error(name+' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}let gestureEventHandler=this.onGestureHandlerEvent;const{onGestureEvent,onGestureHandlerEvent}=this.props;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}let gestureStateEventHandler=this.onGestureHandlerStateChange;const{onHandlerStateChange,onGestureHandlerStateChange}=this.props;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}const events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;let child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));}let grandChildren=child.props.children;if(false&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,Object.assign({ref:this.refHandler,collapsable:false},isJestEnv()?{handlerType:name,handlerTag:this.handlerTag,enabled:this.props.enabled}:{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}_defineProperty(Handler,\"displayName\",name);_defineProperty(Handler,\"contextType\",GestureHandlerRootViewContext);return Handler;}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","getNextHandlerTag","filterConfig","findNodeHandle","scheduleFlushOperations","deepEqual","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","Object","assign","onGestureHandlerEvent","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","isMountedRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","displayName","toArray","push","createElement","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-gesture-handler/lib/module/handlers/createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport { handlerIDToTag, registerOldGestureHandler } from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, findNodeHandle, scheduleFlushOperations } from './utils';\nimport { ValueOf } from '../typeUtils';\nimport { deepEqual, isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}