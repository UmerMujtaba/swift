{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"rootStyle\",\"textInputStyle\",\"onBlur\",\"onFocus\",\"value\",\"renderCell\",\"cellCount\",\"RootProps\",\"RootComponent\",\"InputComponent\"];import Platform from\"react-native-web/dist/exports/Platform\";import TextInput from\"react-native-web/dist/exports/TextInput\";import View from\"react-native-web/dist/exports/View\";import React,{forwardRef}from'react';import{getStyle,getSymbols}from'./utils';import{useFocusState}from'./useFocusState';import{styles}from'./CodeField.styles';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DEFAULT_CELL_COUNT=4;const autoComplete='one-time-code';function CodeFieldComponent(_ref,ref){let{rootStyle,textInputStyle,onBlur,onFocus,value,renderCell,cellCount=DEFAULT_CELL_COUNT,RootProps={},RootComponent=View,InputComponent=TextInput}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const focusState=useFocusState(onBlur,onFocus);const cells=getSymbols(value||'',cellCount).map((symbol,index,symbols)=>{const isFirstEmptySymbol=symbols.indexOf('')===index;return renderCell({index,symbol,isFocused:focusState.isFocused&&isFirstEmptySymbol});});return _jsxs(RootComponent,Object.assign({},RootProps,{style:getStyle(styles.root,rootStyle),children:[cells,_jsx(InputComponent,Object.assign({disableFullscreenUI:true,caretHidden:true,spellCheck:false,autoCorrect:false,blurOnSubmit:false,clearButtonMode:\"never\",autoCapitalize:\"characters\",underlineColorAndroid:\"transparent\",maxLength:cellCount,autoComplete:autoComplete},rest,{value:value,onBlur:focusState.onBlur,onFocus:focusState.onFocus,style:getStyle(styles.textInput,textInputStyle),ref:ref}))]}));}export const CodeField=forwardRef(CodeFieldComponent);","map":{"version":3,"names":["React","forwardRef","getStyle","getSymbols","useFocusState","styles","jsx","_jsx","jsxs","_jsxs","DEFAULT_CELL_COUNT","autoComplete","CodeFieldComponent","_ref","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","InputComponent","TextInput","rest","_objectWithoutPropertiesLoose","_excluded","focusState","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","isFocused","Object","assign","style","root","children","disableFullscreenUI","caretHidden","spellCheck","autoCorrect","blurOnSubmit","clearButtonMode","autoCapitalize","underlineColorAndroid","maxLength","textInput","CodeField"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-confirmation-code-field/esm/CodeField.js"],"sourcesContent":["import { Platform, TextInput, View, } from 'react-native';\nimport React, { forwardRef, } from 'react';\nimport { getStyle, getSymbols } from './utils';\nimport { useFocusState } from './useFocusState';\nimport { styles } from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nconst autoComplete = Platform.select({\n    android: 'sms-otp',\n    default: 'one-time-code',\n});\nfunction CodeFieldComponent({ rootStyle, textInputStyle, onBlur, onFocus, value, renderCell, cellCount = DEFAULT_CELL_COUNT, RootProps = {}, RootComponent = View, InputComponent = TextInput, ...rest }, ref) {\n    const focusState = useFocusState(onBlur, onFocus);\n    const cells = getSymbols(value || '', cellCount).map((symbol, index, symbols) => {\n        const isFirstEmptySymbol = symbols.indexOf('') === index;\n        return renderCell({\n            index,\n            symbol,\n            isFocused: focusState.isFocused && isFirstEmptySymbol,\n        });\n    });\n    return (<RootComponent {...RootProps} style={getStyle(styles.root, rootStyle)}>\n      {cells}\n      <InputComponent disableFullscreenUI \n    // Use `caretHidden={false}` when `value={''}` and user can't paste\\copy text because menu doesn't appear\n    // See more: https://github.com/retyui/react-native-confirmation-code-field/issues/140\n    caretHidden={true} spellCheck={false} autoCorrect={false} blurOnSubmit={false} clearButtonMode=\"never\" autoCapitalize=\"characters\" underlineColorAndroid=\"transparent\" maxLength={cellCount} autoComplete={autoComplete} {...rest} value={value} onBlur={focusState.onBlur} onFocus={focusState.onFocus} style={getStyle(styles.textInput, textInputStyle)} ref={ref}/>\n    </RootComponent>);\n}\nexport const CodeField = forwardRef(CodeFieldComponent);\n"],"mappings":"gaACA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAS,OAAO,CAC1C,OAASC,QAAQ,CAAEC,UAAU,KAAQ,SAAS,CAC9C,OAASC,aAAa,KAAQ,iBAAiB,CAC/C,OAASC,MAAM,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAC5C,KAAM,CAAAC,kBAAkB,CAAG,CAAC,CAC5B,KAAM,CAAAC,YAAY,CAEL,eACX,CACF,QAAS,CAAAC,kBAAkBA,CAAAC,IAAA,CAA+KC,GAAG,CAAE,IAAnL,CAAEC,SAAS,CAAEC,cAAc,CAAEC,MAAM,CAAEC,OAAO,CAAEC,KAAK,CAAEC,UAAU,CAAEC,SAAS,CAAGX,kBAAkB,CAAEY,SAAS,CAAG,CAAC,CAAC,CAAEC,aAAa,CAAGC,IAAI,CAAEC,cAAc,CAAGC,SAAmB,CAAC,CAAAb,IAAA,CAANc,IAAI,CAAAC,6BAAA,CAAAf,IAAA,CAAAgB,SAAA,EAClM,KAAM,CAAAC,UAAU,CAAG1B,aAAa,CAACa,MAAM,CAAEC,OAAO,CAAC,CACjD,KAAM,CAAAa,KAAK,CAAG5B,UAAU,CAACgB,KAAK,EAAI,EAAE,CAAEE,SAAS,CAAC,CAACW,GAAG,CAAC,CAACC,MAAM,CAAEC,KAAK,CAAEC,OAAO,GAAK,CAC7E,KAAM,CAAAC,kBAAkB,CAAGD,OAAO,CAACE,OAAO,CAAC,EAAE,CAAC,GAAKH,KAAK,CACxD,MAAO,CAAAd,UAAU,CAAC,CACdc,KAAK,CACLD,MAAM,CACNK,SAAS,CAAER,UAAU,CAACQ,SAAS,EAAIF,kBACvC,CAAC,CAAC,CACN,CAAC,CAAC,CACF,MAAQ,CAAA3B,KAAA,CAACc,aAAa,CAAAgB,MAAA,CAAAC,MAAA,IAAKlB,SAAS,EAAEmB,KAAK,CAAEvC,QAAQ,CAACG,MAAM,CAACqC,IAAI,CAAE3B,SAAS,CAAE,CAAA4B,QAAA,EAC3EZ,KAAK,CACNxB,IAAA,CAACkB,cAAc,CAAAc,MAAA,CAAAC,MAAA,EAACI,mBAAmB,MAGrCC,WAAW,CAAE,IAAK,CAACC,UAAU,CAAE,KAAM,CAACC,WAAW,CAAE,KAAM,CAACC,YAAY,CAAE,KAAM,CAACC,eAAe,CAAC,OAAO,CAACC,cAAc,CAAC,YAAY,CAACC,qBAAqB,CAAC,aAAa,CAACC,SAAS,CAAE/B,SAAU,CAACV,YAAY,CAAEA,YAAa,EAAKgB,IAAI,EAAER,KAAK,CAAEA,KAAM,CAACF,MAAM,CAAEa,UAAU,CAACb,MAAO,CAACC,OAAO,CAAEY,UAAU,CAACZ,OAAQ,CAACuB,KAAK,CAAEvC,QAAQ,CAACG,MAAM,CAACgD,SAAS,CAAErC,cAAc,CAAE,CAACF,GAAG,CAAEA,GAAI,EAAC,CAAC,GACxV,CAAC,CACpB,CACA,MAAO,MAAM,CAAAwC,SAAS,CAAGrD,UAAU,CAACW,kBAAkB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}