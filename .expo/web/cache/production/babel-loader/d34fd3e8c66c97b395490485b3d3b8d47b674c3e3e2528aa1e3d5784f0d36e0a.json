{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{PointerType}from'../../PointerType';import{State}from'../../State';import PointerTracker from'./PointerTracker';export default class GestureHandlerOrchestrator{constructor(){_defineProperty(this,\"gestureHandlers\",[]);_defineProperty(this,\"awaitingHandlers\",[]);_defineProperty(this,\"awaitingHandlersTags\",new Set());_defineProperty(this,\"handlingChangeSemaphore\",0);_defineProperty(this,\"activationIndex\",0);}scheduleFinishedHandlersCleanup(){if(this.handlingChangeSemaphore===0){this.cleanupFinishedHandlers();}}cleanHandler(handler){handler.reset();handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_VALUE);}removeHandlerFromOrchestrator(handler){const indexInGestureHandlers=this.gestureHandlers.indexOf(handler);const indexInAwaitingHandlers=this.awaitingHandlers.indexOf(handler);if(indexInGestureHandlers>=0){this.gestureHandlers.splice(indexInGestureHandlers,1);}if(indexInAwaitingHandlers>=0){this.awaitingHandlers.splice(indexInAwaitingHandlers,1);this.awaitingHandlersTags.delete(handler.getTag());}}cleanupFinishedHandlers(){const handlersToRemove=new Set();for(let i=this.gestureHandlers.length-1;i>=0;--i){const handler=this.gestureHandlers[i];if(this.isFinished(handler.getState())&&!handler.isAwaiting()){this.cleanHandler(handler);handlersToRemove.add(handler);}}this.gestureHandlers=this.gestureHandlers.filter(handler=>!handlersToRemove.has(handler));}hasOtherHandlerToWaitFor(handler){const hasToWaitFor=otherHandler=>{return!this.isFinished(otherHandler.getState())&&this.shouldHandlerWaitForOther(handler,otherHandler);};return this.gestureHandlers.some(hasToWaitFor);}shouldBeCancelledByFinishedHandler(handler){const shouldBeCancelled=otherHandler=>{return this.shouldHandlerWaitForOther(handler,otherHandler)&&otherHandler.getState()===State.END;};return this.gestureHandlers.some(shouldBeCancelled);}tryActivate(handler){if(this.shouldBeCancelledByFinishedHandler(handler)){handler.cancel();return;}if(this.hasOtherHandlerToWaitFor(handler)){this.addAwaitingHandler(handler);return;}const handlerState=handler.getState();if(handlerState===State.CANCELLED||handlerState===State.FAILED){return;}if(this.shouldActivate(handler)){this.makeActive(handler);return;}if(handlerState===State.ACTIVE){handler.fail();return;}if(handlerState===State.BEGAN){handler.cancel();}}shouldActivate(handler){const shouldBeCancelledBy=otherHandler=>{return this.shouldHandlerBeCancelledBy(handler,otherHandler);};return!this.gestureHandlers.some(shouldBeCancelledBy);}cleanupAwaitingHandlers(handler){const shouldWait=otherHandler=>{return!otherHandler.isAwaiting()&&this.shouldHandlerWaitForOther(otherHandler,handler);};for(const otherHandler of this.awaitingHandlers){if(shouldWait(otherHandler)){this.cleanHandler(otherHandler);this.awaitingHandlersTags.delete(otherHandler.getTag());}}this.awaitingHandlers=this.awaitingHandlers.filter(otherHandler=>this.awaitingHandlersTags.has(otherHandler.getTag()));}onHandlerStateChange(handler,newState,oldState,sendIfDisabled){if(!handler.isEnabled()&&!sendIfDisabled){return;}this.handlingChangeSemaphore+=1;if(this.isFinished(newState)){for(const otherHandler of this.awaitingHandlers){if(!this.shouldHandlerWaitForOther(otherHandler,handler)||!this.awaitingHandlersTags.has(otherHandler.getTag())){continue;}if(newState!==State.END){this.tryActivate(otherHandler);continue;}otherHandler.cancel();if(otherHandler.getState()===State.END){otherHandler.sendEvent(State.CANCELLED,State.BEGAN);}otherHandler.setAwaiting(false);}}if(newState===State.ACTIVE){this.tryActivate(handler);}else if(oldState===State.ACTIVE||oldState===State.END){if(handler.isActive()){handler.sendEvent(newState,oldState);}else if(oldState===State.ACTIVE&&(newState===State.CANCELLED||newState===State.FAILED)){handler.sendEvent(newState,State.BEGAN);}}else if(oldState!==State.UNDETERMINED||newState!==State.CANCELLED){handler.sendEvent(newState,oldState);}this.handlingChangeSemaphore-=1;this.scheduleFinishedHandlersCleanup();if(!this.awaitingHandlers.includes(handler)){this.cleanupAwaitingHandlers(handler);}}makeActive(handler){const currentState=handler.getState();handler.setActive(true);handler.setShouldResetProgress(true);handler.setActivationIndex(this.activationIndex++);for(let i=this.gestureHandlers.length-1;i>=0;--i){if(this.shouldHandlerBeCancelledBy(this.gestureHandlers[i],handler)){this.gestureHandlers[i].cancel();}}for(const otherHandler of this.awaitingHandlers){if(this.shouldHandlerBeCancelledBy(otherHandler,handler)){otherHandler.setAwaiting(false);}}handler.sendEvent(State.ACTIVE,State.BEGAN);if(currentState!==State.ACTIVE){handler.sendEvent(State.END,State.ACTIVE);if(currentState!==State.END){handler.sendEvent(State.UNDETERMINED,State.END);}}if(!handler.isAwaiting()){return;}handler.setAwaiting(false);this.awaitingHandlers=this.awaitingHandlers.filter(otherHandler=>otherHandler!==handler);}addAwaitingHandler(handler){if(this.awaitingHandlers.includes(handler)){return;}this.awaitingHandlers.push(handler);this.awaitingHandlersTags.add(handler.getTag());handler.setAwaiting(true);handler.setActivationIndex(this.activationIndex++);}recordHandlerIfNotPresent(handler){if(this.gestureHandlers.includes(handler)){return;}this.gestureHandlers.push(handler);handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_SAFE_INTEGER);}shouldHandlerWaitForOther(handler,otherHandler){return handler!==otherHandler&&(handler.shouldWaitForHandlerFailure(otherHandler)||otherHandler.shouldRequireToWaitForFailure(handler));}canRunSimultaneously(gh1,gh2){return gh1===gh2||gh1.shouldRecognizeSimultaneously(gh2)||gh2.shouldRecognizeSimultaneously(gh1);}shouldHandlerBeCancelledBy(handler,otherHandler){if(this.canRunSimultaneously(handler,otherHandler)){return false;}if(handler.isAwaiting()||handler.getState()===State.ACTIVE){return handler.shouldBeCancelledByOther(otherHandler);}const handlerPointers=handler.getTrackedPointersID();const otherPointers=otherHandler.getTrackedPointersID();if(!PointerTracker.shareCommonPointers(handlerPointers,otherPointers)&&handler.getDelegate().getView()!==otherHandler.getDelegate().getView()){return this.checkOverlap(handler,otherHandler);}return true;}checkOverlap(handler,otherHandler){const isPointerWithinBothBounds=pointer=>{const point=handler.getTracker().getLastAbsoluteCoords(pointer);return handler.getDelegate().isPointerInBounds(point)&&otherHandler.getDelegate().isPointerInBounds(point);};const handlerPointers=handler.getTrackedPointersID();const otherPointers=otherHandler.getTrackedPointersID();return handlerPointers.some(isPointerWithinBothBounds)||otherPointers.some(isPointerWithinBothBounds);}isFinished(state){return state===State.END||state===State.FAILED||state===State.CANCELLED;}cancelMouseAndPenGestures(currentHandler){this.gestureHandlers.forEach(handler=>{if(handler.getPointerType()!==PointerType.MOUSE&&handler.getPointerType()!==PointerType.STYLUS){return;}if(handler!==currentHandler){handler.cancel();}else{handler.getTracker().resetTracker();}});}static getInstance(){if(!GestureHandlerOrchestrator.instance){GestureHandlerOrchestrator.instance=new GestureHandlerOrchestrator();}return GestureHandlerOrchestrator.instance;}}_defineProperty(GestureHandlerOrchestrator,\"instance\",void 0);","map":{"version":3,"names":["PointerType","State","PointerTracker","GestureHandlerOrchestrator","constructor","_defineProperty","Set","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","setActive","setAwaiting","setActivationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","indexInGestureHandlers","gestureHandlers","indexOf","indexInAwaitingHandlers","awaitingHandlers","splice","awaitingHandlersTags","delete","getTag","handlersToRemove","i","length","isFinished","getState","isAwaiting","add","filter","has","hasOtherHandlerToWaitFor","hasToWaitFor","otherHandler","shouldHandlerWaitForOther","some","shouldBeCancelledByFinishedHandler","shouldBeCancelled","END","tryActivate","cancel","addAwaitingHandler","handlerState","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","shouldBeCancelledBy","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","shouldWait","onHandlerStateChange","newState","oldState","sendIfDisabled","isEnabled","sendEvent","isActive","UNDETERMINED","includes","currentState","setShouldResetProgress","activationIndex","push","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","getDelegate","getView","checkOverlap","isPointerWithinBothBounds","pointer","point","getTracker","getLastAbsoluteCoords","isPointerInBounds","state","cancelMouseAndPenGestures","currentHandler","forEach","getPointerType","MOUSE","STYLUS","resetTracker","getInstance","instance"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-gesture-handler/lib/module/web/tools/GestureHandlerOrchestrator.ts"],"sourcesContent":["import { PointerType } from '../../PointerType';\nimport { State } from '../../State';\n\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport PointerTracker from './PointerTracker';\n\nexport default class GestureHandlerOrchestrator {\n  private static instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: IGestureHandler[] = [];\n  private awaitingHandlers: IGestureHandler[] = [];\n  private awaitingHandlersTags: Set<number> = new Set();\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: IGestureHandler): void {\n    handler.reset();\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_VALUE);\n  }\n\n  public removeHandlerFromOrchestrator(handler: IGestureHandler): void {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.getTag());\n    }\n  }\n\n  private cleanupFinishedHandlers(): void {\n    const handlersToRemove = new Set<IGestureHandler>();\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n\n    this.gestureHandlers = this.gestureHandlers.filter(\n      (handler) => !handlersToRemove.has(handler)\n    );\n  }\n\n  private hasOtherHandlerToWaitFor(handler: IGestureHandler): boolean {\n    const hasToWaitFor = (otherHandler: IGestureHandler) => {\n      return (\n        !this.isFinished(otherHandler.getState()) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      );\n    };\n\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n\n  private shouldBeCancelledByFinishedHandler(\n    handler: IGestureHandler\n  ): boolean {\n    const shouldBeCancelled = (otherHandler: IGestureHandler) => {\n      return (\n        this.shouldHandlerWaitForOther(handler, otherHandler) &&\n        otherHandler.getState() === State.END\n      );\n    };\n\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n\n  private tryActivate(handler: IGestureHandler): void {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n\n    const handlerState = handler.getState();\n\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n\n  private shouldActivate(handler: IGestureHandler): boolean {\n    const shouldBeCancelledBy = (otherHandler: IGestureHandler) => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n\n  private cleanupAwaitingHandlers(handler: IGestureHandler): void {\n    const shouldWait = (otherHandler: IGestureHandler) => {\n      return (\n        !otherHandler.isAwaiting() &&\n        this.shouldHandlerWaitForOther(otherHandler, handler)\n      );\n    };\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.getTag());\n      }\n    }\n\n    this.awaitingHandlers = this.awaitingHandlers.filter((otherHandler) =>\n      this.awaitingHandlersTags.has(otherHandler.getTag())\n    );\n  }\n\n  public onHandlerStateChange(\n    handler: IGestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.isEnabled() && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (\n          !this.shouldHandlerWaitForOther(otherHandler, handler) ||\n          !this.awaitingHandlersTags.has(otherHandler.getTag())\n        ) {\n          continue;\n        }\n\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n\n        otherHandler.cancel();\n\n        if (otherHandler.getState() === State.END) {\n          // Handle edge case, where discrete gestures end immediately after activation thus\n          // their state is set to END and when the gesture they are waiting for activates they\n          // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n          // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n\n        otherHandler.setAwaiting(false);\n      }\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.isActive()) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: IGestureHandler): void {\n    const currentState = handler.getState();\n\n    handler.setActive(true);\n    handler.setShouldResetProgress(true);\n    handler.setActivationIndex(this.activationIndex++);\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.setAwaiting(false);\n      }\n    }\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (!handler.isAwaiting()) {\n      return;\n    }\n\n    handler.setAwaiting(false);\n\n    this.awaitingHandlers = this.awaitingHandlers.filter(\n      (otherHandler) => otherHandler !== handler\n    );\n  }\n\n  private addAwaitingHandler(handler: IGestureHandler): void {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.getTag());\n\n    handler.setAwaiting(true);\n    handler.setActivationIndex(this.activationIndex++);\n  }\n\n  public recordHandlerIfNotPresent(handler: IGestureHandler): void {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: IGestureHandler,\n    gh2: IGestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (handler.isAwaiting() || handler.getState() === State.ACTIVE) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.getDelegate().getView() !== otherHandler.getDelegate().getView()\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const isPointerWithinBothBounds = (pointer: number) => {\n      const point = handler.getTracker().getLastAbsoluteCoords(pointer);\n\n      return (\n        handler.getDelegate().isPointerInBounds(point) &&\n        otherHandler.getDelegate().isPointerInBounds(point)\n      );\n    };\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    return (\n      handlerPointers.some(isPointerWithinBothBounds) ||\n      otherPointers.some(isPointerWithinBothBounds)\n    );\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: IGestureHandler): void {\n    this.gestureHandlers.forEach((handler: IGestureHandler) => {\n      if (\n        handler.getPointerType() !== PointerType.MOUSE &&\n        handler.getPointerType() !== PointerType.STYLUS\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.getTracker().resetTracker();\n      }\n    });\n  }\n\n  public static getInstance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator.instance) {\n      GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator.instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}