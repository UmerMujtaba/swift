{"ast":null,"code":"import React from'react';import{isNewWebImplementationEnabled}from'./EnableNewWebImplementation';import{Gestures,HammerGestures}from'./web/Gestures';import InteractionManager from'./web/tools/InteractionManager';import NodeManager from'./web/tools/NodeManager';import*as HammerNodeManager from'./web_hammer/NodeManager';import{GestureHandlerWebDelegate}from'./web/tools/GestureHandlerWebDelegate';export default{handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler(handlerName,handlerTag,config){if(isNewWebImplementationEnabled()){if(!(handlerName in Gestures)){throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);}const GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass(new GestureHandlerWebDelegate()));InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),config);}else{if(!(handlerName in HammerGestures)){throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);}const GestureClass=HammerGestures[handlerName];HammerNodeManager.createGestureHandler(handlerTag,new GestureClass());}this.updateGestureHandler(handlerTag,config);},attachGestureHandler(handlerTag,newView,_actionType,propsRef){if(!(newView instanceof HTMLElement||newView instanceof React.Component)){return;}if(isNewWebImplementationEnabled()){NodeManager.getHandler(handlerTag).init(newView,propsRef);}else{HammerNodeManager.getHandler(handlerTag).setView(newView,propsRef);}},updateGestureHandler(handlerTag,newConfig){if(isNewWebImplementationEnabled()){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),newConfig);}else{HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);}},getGestureHandlerNode(handlerTag){if(isNewWebImplementationEnabled()){return NodeManager.getHandler(handlerTag);}else{return HammerNodeManager.getHandler(handlerTag);}},dropGestureHandler(handlerTag){if(isNewWebImplementationEnabled()){NodeManager.dropGestureHandler(handlerTag);}else{HammerNodeManager.dropGestureHandler(handlerTag);}},flushOperations(){}};","map":{"version":3,"names":["React","isNewWebImplementationEnabled","Gestures","HammerGestures","InteractionManager","NodeManager","HammerNodeManager","GestureHandlerWebDelegate","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["/Users/nextek/Desktop/folder/SwiftPay/node_modules/react-native-gesture-handler/lib/module/RNGestureHandlerModule.web.ts"],"sourcesContent":["import React from 'react';\n\nimport type { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\nimport { Gestures, HammerGestures } from './web/Gestures';\nimport type { Config } from './web/interfaces';\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(\n        handlerTag,\n        new GestureClass(new GestureHandlerWebDelegate())\n      );\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,6BAAT,KAA8C,8BAA9C,CACA,OAASC,QAAT,CAAmBC,cAAnB,KAAyC,gBAAzC,CAEA,MAAO,CAAAC,kBAAP,KAA+B,gCAA/B,CACA,MAAO,CAAAC,WAAP,KAAwB,yBAAxB,CACA,MAAO,GAAK,CAAAC,iBAAZ,KAAmC,0BAAnC,CACA,OAASC,yBAAT,KAA0C,uCAA1C,CAEA,cAAe,CACbC,oBAAoBA,CAACC,GAAD,CAAcC,oBAAd,CAA6C,CAC/DC,OAAO,CAACC,IAAR,CAAa,wBAAb,CAAuCH,GAAvC,CAA4CC,oBAA5C,EACD,CAHY,CAIbG,sBAAsBA,CAAA,CAAG,CACvBF,OAAO,CAACC,IAAR,CAAa,0BAAb,EACD,CANY,CAObE,oBAAoBA,CAClBC,WADkB,CAElBC,UAFkB,CAGlBC,MAHkB,CAIlB,CACA,GAAIhB,6BAA6B,EAAjC,CAAqC,CACnC,GAAI,EAAEc,WAAW,GAAI,CAAAb,QAAjB,CAAJ,CAAgC,CAC9B,KAAM,IAAI,CAAAgB,KAAJ,CACH,iCAAgCH,WAAY,2BADzC,CAAN,CAGD,CAED,KAAM,CAAAI,YAAY,CAAGjB,QAAQ,CAACa,WAAD,CAA7B,CACAV,WAAW,CAACS,oBAAZ,CACEE,UADF,CAEE,GAAI,CAAAG,YAAJ,CAAiB,GAAI,CAAAZ,yBAAJ,EAAjB,CAFF,EAIAH,kBAAkB,CAACgB,WAAnB,GAAiCC,qBAAjC,CACEhB,WAAW,CAACiB,UAAZ,CAAuBN,UAAvB,CADF,CAEEC,MAFF,EAID,CAhBD,IAgBO,CACL,GAAI,EAAEF,WAAW,GAAI,CAAAZ,cAAjB,CAAJ,CAAsC,CACpC,KAAM,IAAI,CAAAe,KAAJ,CACH,iCAAgCH,WAAY,2BADzC,CAAN,CAGD,CAID,KAAM,CAAAI,YAAY,CAAGhB,cAAc,CAACY,WAAD,CAAnC,CAEAT,iBAAiB,CAACQ,oBAAlB,CAAuCE,UAAvC,CAAmD,GAAI,CAAAG,YAAJ,EAAnD,EACD,CAED,KAAKI,oBAAL,CAA0BP,UAA1B,CAAsCC,MAAtC,EACD,CA3CY,CA4CbO,oBAAoBA,CAClBR,UADkB,CAGlBS,OAHkB,CAIlBC,WAJkB,CAKlBC,QALkB,CAMlB,CACA,GACE,EAAEF,OAAO,WAAY,CAAAG,WAAnB,EAAkCH,OAAO,WAAY,CAAAzB,KAAK,CAAC6B,SAA7D,CADF,CAEE,CACA,OACD,CAED,GAAI5B,6BAA6B,EAAjC,CAAqC,CAEnCI,WAAW,CAACiB,UAAZ,CAAuBN,UAAvB,EAAmCc,IAAnC,CAAwCL,OAAxC,CAAiDE,QAAjD,EACD,CAHD,IAGO,CAELrB,iBAAiB,CAACgB,UAAlB,CAA6BN,UAA7B,EAAyCe,OAAzC,CAAiDN,OAAjD,CAA0DE,QAA1D,EACD,CACF,CAhEY,CAiEbJ,oBAAoBA,CAACP,UAAD,CAAqBgB,SAArB,CAAwC,CAC1D,GAAI/B,6BAA6B,EAAjC,CAAqC,CACnCI,WAAW,CAACiB,UAAZ,CAAuBN,UAAvB,EAAmCiB,mBAAnC,CAAuDD,SAAvD,EAEA5B,kBAAkB,CAACgB,WAAnB,GAAiCC,qBAAjC,CACEhB,WAAW,CAACiB,UAAZ,CAAuBN,UAAvB,CADF,CAEEgB,SAFF,EAID,CAPD,IAOO,CACL1B,iBAAiB,CAACgB,UAAlB,CAA6BN,UAA7B,EAAyCiB,mBAAzC,CAA6DD,SAA7D,EACD,CACF,CA5EY,CA6EbE,qBAAqBA,CAAClB,UAAD,CAAqB,CACxC,GAAIf,6BAA6B,EAAjC,CAAqC,CACnC,MAAO,CAAAI,WAAW,CAACiB,UAAZ,CAAuBN,UAAvB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,CAAAV,iBAAiB,CAACgB,UAAlB,CAA6BN,UAA7B,CAAP,CACD,CACF,CAnFY,CAoFbmB,kBAAkBA,CAACnB,UAAD,CAAqB,CACrC,GAAIf,6BAA6B,EAAjC,CAAqC,CACnCI,WAAW,CAAC8B,kBAAZ,CAA+BnB,UAA/B,EACD,CAFD,IAEO,CACLV,iBAAiB,CAAC6B,kBAAlB,CAAqCnB,UAArC,EACD,CACF,CA1FY,CA4FboB,eAAeA,CAAA,CAAG,CAAE,CA5FP,CAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}